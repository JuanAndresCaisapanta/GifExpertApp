{"version":3,"sources":["components/AddCategory.js","helpers/getGifs.js","components/GifGridItem.js","components/GifGrid.js","hooks/useFetchGifs.js","GifExpertApp.js","index.js"],"names":["AddCategory","setCategories","useState","inputValue","setInputValue","onSubmit","e","preventDefault","trim","length","cats","type","value","onChange","target","getGifs","category","a","url","encodeURI","fetch","resp","json","data","gifs","map","img","id","title","images","downsized_medium","GifGridItem","className","src","alt","GifGrid","loading","state","setstate","useEffect","then","imgs","useFetchGifs","GifExpertApp","categories","ReactDOM","render","document","getElementById"],"mappings":"mMAGaA,EAAc,SAAC,GAAqB,IAApBC,EAAmB,EAAnBA,cAAmB,EACVC,mBAAS,IADC,mBACvCC,EADuC,KAC3BC,EAD2B,KAc9C,OACE,sBAAMC,SAVe,SAACC,GAClBA,EAAEC,iBACDJ,EAAWK,OAAOC,OAAO,IAC1BR,GAAc,SAAAS,GAAI,OAAKP,GAAL,mBAAmBO,OACrCN,EAAc,MAMlB,SACE,uBACAO,KAAK,OACLC,MAAOT,EACPU,SAjBsB,SAACP,GACtBF,EAAcE,EAAEQ,OAAOF,a,+BCJjBG,EAAO,uCAAG,WAAOC,GAAP,uBAAAC,EAAA,6DACbC,EADa,iDAEyBC,UAAUH,GAFnC,+DAGAI,MAAMF,GAHN,cAGbG,EAHa,gBAIIA,EAAKC,OAJT,uBAIXC,EAJW,EAIXA,KACFC,EAAOD,EAAKE,KAAI,SAACC,GAAS,IAAD,EAC7B,MAAO,CACLC,GAAID,EAAIC,GACRC,MAAOF,EAAIE,MACXV,IAAG,UAAEQ,EAAIG,cAAN,aAAE,EAAYC,iBAAiBZ,QATnB,kBAYdM,GAZc,4CAAH,sDCAPO,EAAc,SAAC,GAAmB,EAAlBJ,GAAmB,IAAhBC,EAAe,EAAfA,MAAMV,EAAS,EAATA,IAElC,OACI,sBAAKc,UAAU,8CAAf,UACC,qBAAKC,IAAKf,EAAKgB,IAAKN,IACpB,4BAAIA,QCAAO,EAAU,SAAC,GAAkB,IAAhBnB,EAAe,EAAfA,SAAe,ECJf,SAACA,GAAY,IAAD,EAERd,mBAAS,CAC/BqB,KAAK,GACLa,SAAS,IAJqB,mBAE3BC,EAF2B,KAEpBC,EAFoB,KAqBlC,OAfAC,qBAAU,WACTxB,EAASC,GAAUwB,MAAK,SAAAC,GAEjBH,EAAS,CACLf,KAAMkB,EACNL,SAAS,SAKrB,CAACpB,IAKMqB,EDdiBK,CAAa1B,GAA7Ba,EAH6B,EAGlCN,KAAYa,EAHsB,EAGtBA,QAEjB,OACI,qCACF,oBAAIJ,UAAU,oCAAd,SAAmDhB,IAElDoB,GAAU,wCACV,qBAAKJ,UAAU,6CAAf,SAGSH,EAAOJ,KAAI,SAAAC,GAAG,OAER,cAAC,EAAD,eAGIA,GADCA,EAAIC,aEEdgB,EAtBa,WAAO,IAAD,EAEEzC,mBAAS,CAAC,KAFZ,mBAE1B0C,EAF0B,KAEd3C,EAFc,KAI9B,OACI,gCACI,8CACA,uBACD,cAAC,EAAD,CAAaA,cAAeA,IAC3B,6BAEQ2C,EAAWnB,KAAI,SAAAT,GAAQ,OACnB,cAAC,EAAD,CAEAA,SAAUA,GADLA,Y,MCX7B6B,IAASC,OACL,cAAC,EAAD,IACFC,SAASC,eAAe,W","file":"static/js/main.3b96d11f.chunk.js","sourcesContent":["import React, { useState } from \"react\";\r\nimport { PropTypes } from \"prop-types\";\r\n\r\nexport const AddCategory = ({setCategories}) => {\r\n  const [inputValue, setInputValue] = useState('');\r\n    const handleInputChange=(e)=>{\r\n       setInputValue(e.target.value);\r\n    }\r\n    const handleSubmit = (e)=>{\r\n        e.preventDefault();\r\n      if(inputValue.trim().length>2){\r\n        setCategories(cats =>[ inputValue,...cats]);\r\n        setInputValue('');\r\n      }\r\n        \r\n      \r\n    }\r\n  return (\r\n    <form onSubmit={handleSubmit}>\r\n      <input \r\n      type=\"text\" \r\n      value={inputValue}\r\n      onChange={handleInputChange}\r\n      />\r\n    </form>\r\n  );\r\n};\r\n\r\nAddCategory.propTypes={\r\n    setCategories: PropTypes.func.isRequired\r\n}\r\n","\r\n\r\nexport const getGifs = async (category) => {\r\n    const url =\r\n      `https://api.giphy.com/v1/gifs/search?q=${encodeURI(category)}&limit=10&api_key=QrCYsMs7OENWI7a7Da4PE392u2KJEQbU`;\r\n    const resp = await fetch(url);\r\n    const { data } = await resp.json();\r\n    const gifs = data.map((img) => {\r\n      return {\r\n        id: img.id,\r\n        title: img.title,\r\n        url: img.images?.downsized_medium.url,\r\n      };\r\n    });\r\n  return gifs;\r\n}\r\n","import React from 'react'\r\n\r\nexport const GifGridItem = ({id,title,url}) => {\r\n   \r\n    return (\r\n        <div className=\"card animate__animated animate__backInRight\">\r\n         <img src={url} alt={title}></img>\r\n         <p>{title}</p>\r\n        </div>\r\n    )\r\n}\r\n","import React from \"react\";\r\nimport { useFetchGifs } from \"../hooks/useFetchGifs\";\r\n// import { useState } from \"react\";\r\n// import { useEffect } from \"react\";\r\n// import { getGifs } from \"../helpers/getGifs\";\r\n import { GifGridItem } from \"./GifGridItem\";\r\n\r\nexport const GifGrid = ({ category }) => {\r\n\r\n\r\nconst {data:images,loading}=useFetchGifs(category);\r\n\r\n  return (\r\n      <>\r\n    <h3 className=\"animate__animated animate__fadeIn\">{category}</h3>\r\n\r\n    {loading&& <p>Loading</p>}\r\n     <div className=\"card-grid animate__animated animate__flash\">\r\n   \r\n    {  \r\n              images.map(img=>(\r\n\r\n                    <GifGridItem \r\n                 \r\n                    key={img.id}\r\n                    {...img}\r\n                    />\r\n                  )\r\n              )\r\n        }\r\n      \r\n    </div>\r\n    </>\r\n  );\r\n};\r\n","import { useEffect, useState } from \"react\"\r\nimport {getGifs} from \"../helpers/getGifs\";\r\n\r\nexport const useFetchGifs=(category)=>{\r\n\r\n    const [state, setstate] = useState({\r\n        data:[],\r\n        loading: true\r\n    });\r\n    useEffect(() => {\r\n     getGifs( category).then(imgs=>{\r\n        \r\n            setstate({\r\n                data: imgs,\r\n                loading: false\r\n            });\r\n        \r\n        \r\n     });\r\n }, [category]);\r\n\r\n    \r\n\r\n    \r\n    return state;\r\n}","import React, { useState } from 'react'\r\nimport {AddCategory} from './components/AddCategory'\r\nimport { GifGrid } from './components/GifGrid'\r\n\r\nexport const GifExpertApp = () => {\r\n\r\n const [categories, setCategories]= useState([''])\r\n\r\n    return (\r\n        <div>\r\n            <h2>GifExpertApp</h2>\r\n            <hr/>\r\n           <AddCategory setCategories={setCategories}/>\r\n            <ol>\r\n                {\r\n                    categories.map(category=>(\r\n                        <GifGrid \r\n                        key={category}\r\n                        category={category}/>\r\n                    ))\r\n                }\r\n            </ol>\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default GifExpertApp\r\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport GifExpertApp from './GifExpertApp';\nimport './index.css';\n\n\nReactDOM.render(\n    <GifExpertApp />,\n  document.getElementById('root')\n);\n"],"sourceRoot":""}